/* fira-sans-200 - latin_cyrillic */
@font-face {
  font-family: 'Fira Sans';
  font-style: normal;
  font-weight: 200;
  src: local("Fira Sans ExtraLight"), local("FiraSans-ExtraLight"), url("../fonts/fira-sans-v8-latin_cyrillic-200.woff2") format("woff2"), url("../fonts/fira-sans-v8-latin_cyrillic-200.woff") format("woff");
  /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ }

/* fira-sans-regular - latin_cyrillic */
@font-face {
  font-family: 'Fira Sans';
  font-style: normal;
  font-weight: 400;
  src: local("Fira Sans Regular"), local("FiraSans-Regular"), url("../fonts/fira-sans-v8-latin_cyrillic-regular.woff2") format("woff2"), url("../fonts/fira-sans-v8-latin_cyrillic-regular.woff") format("woff");
  /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ }

/* fira-sans-700 - latin_cyrillic */
@font-face {
  font-family: 'Fira Sans';
  font-style: normal;
  font-weight: 700;
  src: local("Fira Sans Bold"), local("FiraSans-Bold"), url("../fonts/fira-sans-v8-latin_cyrillic-700.woff2") format("woff2"), url("../fonts/fira-sans-v8-latin_cyrillic-700.woff") format("woff");
  /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ }

/* init styles */
*, *:before, *:after {
  box-sizing: border-box; }

html {
  font-size: 18px;
  line-height: 1.4;
  font-weight: 200; }

body {
  font-family: "Fira Sans", sans-serif;
  color: #003459;
  margin: 0;
  padding: 0; }

a {
  text-decoration: none;
  color: #20a4f3; }

.clearfix:before, .clearfix:after {
  content: "";
  display: table; }

.clearfix:after {
  clear: both; }

.mt-0 {
  margin-top: 0; }

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
  /* 1 */ }

.btn {
  display: inline-block;
  font-weight: 300;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  border: 1px solid transparent;
  padding: 6.55977px 18px;
  font-size: 0.85rem;
  line-height: 1.5;
  border-radius: 0.2rem;
  transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; }
  .btn--sm {
    padding: 2.39059px 9.18367px;
    font-size: .75rem; }
  .btn--lg {
    padding: 12.85714px 35.28px;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5; }
  .btn--primary {
    color: white;
    background-color: #00a8e8;
    border-color: #00a8e8; }
    .btn--primary:hover {
      background-color: #008abf;
      border-color: #008abf; }
  .btn--secondary {
    color: white;
    background-color: #e63946;
    border-color: #e63946; }
    .btn--secondary:hover {
      background-color: #db1c2a;
      border-color: #db1c2a; }
  .btn--light {
    color: #607d8b;
    background-color: #eceff1;
    border-color: #eceff1; }
    .btn--light:hover {
      background-color: #d5dbe0;
      border-color: #d5dbe0; }

.text--primary {
  color: #00a8e8 !important; }

.text--secondary {
  color: #e63946 !important; }

.text--center {
  text-align: center !important; }

.align-center {
  justify-content: center; }

.section__header {
  display: flex;
  align-items: center;
  width: 100%;
  margin-bottom: 25.2px; }

.section__title {
  font-size: 1.96rem;
  margin: 0; }

.hamburger {
  padding: 15px 15px;
  display: inline-block;
  cursor: pointer;
  transition-property: opacity, filter;
  transition-duration: 0.15s;
  transition-timing-function: linear;
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible; }
  .hamburger:hover {
    opacity: 0.7; }
  .hamburger.is-active {
    opacity: 0.7; }
    .hamburger.is-active .hamburger-inner,
    .hamburger.is-active .hamburger-inner::before,
    .hamburger.is-active .hamburger-inner::after {
      background-color: #fff; }
    .hamburger.is-active .hamburger-inner {
      transform: translate3d(0, 10px, 0) rotate(45deg); }
      .hamburger.is-active .hamburger-inner::before {
        transform: rotate(-45deg) translate3d(-5.71429px, -6px, 0);
        opacity: 0; }
      .hamburger.is-active .hamburger-inner::after {
        transform: translate3d(0, -20px, 0) rotate(-90deg); }

.hamburger-box {
  width: 40px;
  height: 24px;
  display: inline-block;
  position: relative; }

.hamburger-inner {
  display: block;
  top: 2px;
  margin-top: -2px; }
  .hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
    width: 40px;
    height: 4px;
    background-color: #fff;
    border-radius: 4px;
    position: absolute;
    top: 10px;
    transition-property: transform, opacity;
    transition-timing-function: ease;
    transition-duration: 0.15s; }
  .hamburger-inner::before, .hamburger-inner::after {
    content: "";
    display: block; }
  .hamburger-inner::after {
    bottom: -10px;
    top: 20px; }

.section {
  width: 100%; }
  .section__inner {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
    max-width: 98%; }
    @media (min-width: 576px) {
      .section__inner {
        max-width: 96%; } }
    @media (min-width: 768px) {
      .section__inner {
        max-width: 728px; } }
    @media (min-width: 992px) {
      .section__inner {
        max-width: 952px; } }
    @media (min-width: 1280px) {
      .section__inner {
        max-width: 1240px; } }

.about {
  padding-top: 69.1488px;
  padding-bottom: 69.1488px; }

.topbar {
  background-color: #003459;
  margin-bottom: 69.1488px; }
  .topbar--fixed {
    position: fixed;
    top: 0;
    left: 0;
    margin-bottom: 0;
    z-index: 100; }
  .topbar__nav {
    margin-left: auto;
    font-size: 0;
    text-align: right; }
    .topbar__nav ul {
      display: flex;
      align-items: center;
      margin: 0;
      padding: 0;
      list-style-type: none; }
    .topbar__nav a {
      display: block;
      padding: 18px 18px;
      font-size: 1rem;
      color: white;
      transition-duration: .25s; }
      .topbar__nav a:hover, .topbar__nav a.is-active, .topbar__nav a.active {
        background-color: #004c82; }
  .topbar .hamburger {
    display: none; }

.hero, .forms {
  display: flex;
  position: relative;
  width: 100%;
  height: 100vh;
  background-image: url(./../images/hero.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  background-attachment: fixed; }
  @media (min-width: 1280px) {
    .hero, .forms {
      background-image: url(./../images/hero_xl.jpg); } }
  .hero__text {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 70%;
    height: 100%;
    margin-left: auto;
    margin-right: auto; }
  .hero__title {
    color: white;
    width: 80%;
    font-size: 2.744rem;
    font-weight: normal;
    text-align: center;
    text-shadow: 0 1px 0 rgba(0, 52, 89, 0.5); }
  .hero .btn, .forms .btn {
    margin-top: 69.1488px; }

.about__body {
  width: 100%; }

.about .section__inner {
  padding-left: 69.1488px;
  padding-right: 69.1488px; }

.about.product {
  background-color: #e2f3fd; }

.about figure {
  width: 35%; }
  .about figure.image--left {
    float: left;
    margin-left: 0; }
  .about figure.image--right {
    float: right;
    margin-right: 0; }
  .about figure img {
    width: 100%;
    height: auto;
    border-radius: 5px; }

.about figcaption {
  padding: 0 9.18367px;
  font-size: 0.85rem;
  color: #889ea8; }

.about p {
  margin-top: 0; }

.accordeon {
  display: block;
  width: 100%;
  list-style-type: none;
  margin: 0;
  padding: 0; }
  .accordeon-tab {
    position: relative;
    cursor: pointer;
    z-index: 1; }
    .accordeon-tab:not(:first-of-type) {
      margin-top: -1px; }
    .accordeon-tab:hover {
      z-index: 2; }
      .accordeon-tab:hover .accordeon-tab__header {
        background-color: #ceebfc; }
    .accordeon-tab.is-active .accordeon-tab__header {
      background-color: #bbe3fb; }
      .accordeon-tab.is-active .accordeon-tab__header:after {
        content: '-'; }
    .accordeon-tab.is-active .accordeon-tab__content {
      max-height: 2000px; }
    .accordeon-tab__header {
      position: relative;
      display: block;
      border: 1px solid #bbe3fb;
      background-color: #e2f3fd;
      padding: 12.85714px 25.2px;
      padding-right: calc(2em); }
      .accordeon-tab__header:after {
        content: '+';
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 12.85714px;
        color: #0064ab;
        line-height: 1.2em;
        font-weight: 700;
        width: 1.2em;
        height: 1.2em;
        text-align: center; }
    .accordeon-tab__content {
      overflow: hidden;
      max-height: 0;
      transition: max-height .5s; }
      .accordeon-tab__content-inner {
        padding-top: 9.18367px;
        padding-bottom: 9.18367px; }

.table {
  width: 100%;
  border-collapse: collapse; }
  .table tr:nth-child(even) td {
    background-color: #f5fbfe; }
  .table td {
    vertical-align: top;
    padding: 9.18367px 25.2px; }
    .table td:last-of-type {
      text-align: right; }

/********** forms **********/
.forms .btn {
  margin-top: 0; }

.forms .section__inner {
  height: 100vh;
  width: 100%;
  align-items: center;
  justify-content: center; }

.forms .section__header {
  margin-bottom: 0; }

.forms .section__title {
  font-size: 2.744rem;
  color: white;
  text-shadow: 0 1px 0 rgba(0, 52, 89, 0.5); }

.forms__left, .forms__right {
  width: 50%; }

.forms__right.full-height {
  height: 100%;
  background-color: rgba(255, 255, 255, 0.85); }

.form {
  background-color: rgba(255, 255, 255, 0.85);
  padding: 35.28px 25.2px;
  border-radius: 4px;
  box-shadow: 0 7px 18px -2px rgba(0, 0, 0, 0.35);
  width: 450px;
  margin: 0 auto; }
  .form__label {
    display: flex;
    align-items: center;
    margin-bottom: 12.85714px; }
    .form__label span {
      font-size: 0.85rem;
      width: 140px;
      color: #546e7a; }
    .form__label.text-right {
      justify-content: flex-end;
      margin-bottom: 9.18367px; }
  .form__input {
    width: calc(100% - 140px);
    height: 34px;
    padding: 0 9.18367px;
    border: 1px solid #cfd8dc;
    border-radius: 2px;
    font-size: 0.85rem;
    font-weight: 300; }
    .form__input::-webkit-input-placeholder {
      color: #607d8b; }
    .form__input:-moz-placeholder {
      color: #607d8b; }
    .form__input::-moz-placeholder {
      color: #607d8b; }
    .form__input:-ms-input-placeholder {
      color: #607d8b; }
    .form__input:focus, .form__input:active {
      border-color: #20a4f3;
      box-shadow: 0 0 3px #20a4f3; }
    .form__input:disabled {
      background-color: white;
      border: 1px solid #f2f5f6; }
  .form__checkbox {
    position: relative;
    top: -2px; }
    .form__checkbox + span {
      width: auto;
      margin-left: 9.18367px;
      white-space: nowrap; }
  .form__link {
    display: block;
    text-align: right;
    font-size: 0.85rem; }
    .form__link small {
      display: block;
      font-size: .9em;
      margin-top: -4.68555px;
      margin-bottom: 9.18367px; }
    .form__link:hover {
      text-decoration: underline; }
  .form__hint {
    flex: 0 0 auto;
    display: block;
    width: calc(100% - 80px);
    margin-top: -6.55977px;
    margin-left: 80px;
    font-size: .75rem;
    opacity: .5; }
  .form__footer {
    display: flex;
    align-items: center;
    margin-top: 18px; }
    .form__footer .btn {
      margin-left: auto; }
  .form__submit {
    background-color: #20a4f3;
    border: 1px solid #20a4f3;
    border-radius: 2px;
    color: white;
    height: 38px;
    padding: 0 35.28px;
    margin-left: auto;
    font-size: 0.85rem; }
    .form__submit:hover {
      background-color: #0d9cf2; }
    .form__submit:active {
      background-color: #0c90de; }
  .form--login {
    width: 400px; }
    .form--login .form__label span {
      width: 80px; }
    .form--login .form__input {
      width: calc(100% - 80px); }
    .form--login .form__checkbox {
      top: -1px; }
      .form--login .form__checkbox + span {
        width: auto; }

/********** cabinet **********/
.cabinet .section__inner {
  padding-left: 69.1488px;
  padding-right: 69.1488px; }

.cabinet__left, .cabinet__right {
  width: 50%; }

.cabinet__title {
  width: 100%;
  font-weight: 300;
  margin: 25.2px 0; }

.cabinet__statistics {
  display: inline-block;
  vertical-align: middle;
  width: auto;
  padding: 9.18367px 35.28px;
  border: 3px solid #eceff1;
  border-radius: 0.2rem; }

.cabinet .form {
  box-shadow: none;
  padding: 0; }
  .cabinet .form__footer {
    justify-content: flex-end; }

.cabinet p {
  margin: 18px 0;
  font-size: 0.85rem; }
  .cabinet p strong {
    font-size: 1rem; }

.cabinet .btn {
  position: relative;
  top: -2px;
  margin-left: 9.18367px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
